// Generated by gencpp from file camera_detector/associationsWouter.msg
// DO NOT EDIT!


#ifndef CAMERA_DETECTOR_MESSAGE_ASSOCIATIONSWOUTER_H
#define CAMERA_DETECTOR_MESSAGE_ASSOCIATIONSWOUTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <camera_detector/associationWouter.h>

namespace camera_detector
{
template <class ContainerAllocator>
struct associationsWouter_
{
  typedef associationsWouter_<ContainerAllocator> Type;

  associationsWouter_()
    : humans()  {
    }
  associationsWouter_(const ContainerAllocator& _alloc)
    : humans(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::camera_detector::associationWouter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_detector::associationWouter_<ContainerAllocator> >::other >  _humans_type;
  _humans_type humans;





  typedef boost::shared_ptr< ::camera_detector::associationsWouter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_detector::associationsWouter_<ContainerAllocator> const> ConstPtr;

}; // struct associationsWouter_

typedef ::camera_detector::associationsWouter_<std::allocator<void> > associationsWouter;

typedef boost::shared_ptr< ::camera_detector::associationsWouter > associationsWouterPtr;
typedef boost::shared_ptr< ::camera_detector::associationsWouter const> associationsWouterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_detector::associationsWouter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_detector::associationsWouter_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera_detector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'camera_detector': ['/home/nvidia/detector_ws/src/camera_detector/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera_detector::associationsWouter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_detector::associationsWouter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_detector::associationsWouter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_detector::associationsWouter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_detector::associationsWouter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_detector::associationsWouter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_detector::associationsWouter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36fce1bb8655c74144ed3394387babf3";
  }

  static const char* value(const ::camera_detector::associationsWouter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36fce1bb8655c741ULL;
  static const uint64_t static_value2 = 0x44ed3394387babf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_detector::associationsWouter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_detector/associationsWouter";
  }

  static const char* value(const ::camera_detector::associationsWouter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_detector::associationsWouter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "associationWouter[] humans\n\
\n\
================================================================================\n\
MSG: camera_detector/associationWouter\n\
string leftLegObjectID\n\
string rightLegObjectID\n\
float32 p\n\
";
  }

  static const char* value(const ::camera_detector::associationsWouter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_detector::associationsWouter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.humans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct associationsWouter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_detector::associationsWouter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_detector::associationsWouter_<ContainerAllocator>& v)
  {
    s << indent << "humans[]" << std::endl;
    for (size_t i = 0; i < v.humans.size(); ++i)
    {
      s << indent << "  humans[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_detector::associationWouter_<ContainerAllocator> >::stream(s, indent + "    ", v.humans[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_DETECTOR_MESSAGE_ASSOCIATIONSWOUTER_H
